//
//desde el directorio "grpc", ejecutar el comando:
//protoc --go_out=plugins=grpc:data_data data_data/data_data.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: data_data/data_data.proto

package data_data

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TransferResCode int32

const (
	TransferResCode_Unknown TransferResCode = 0
	TransferResCode_Ok      TransferResCode = 1
	TransferResCode_Failed  TransferResCode = 2
)

// Enum value maps for TransferResCode.
var (
	TransferResCode_name = map[int32]string{
		0: "Unknown",
		1: "Ok",
		2: "Failed",
	}
	TransferResCode_value = map[string]int32{
		"Unknown": 0,
		"Ok":      1,
		"Failed":  2,
	}
)

func (x TransferResCode) Enum() *TransferResCode {
	p := new(TransferResCode)
	*p = x
	return p
}

func (x TransferResCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferResCode) Descriptor() protoreflect.EnumDescriptor {
	return file_data_data_data_data_proto_enumTypes[0].Descriptor()
}

func (TransferResCode) Type() protoreflect.EnumType {
	return &file_data_data_data_data_proto_enumTypes[0]
}

func (x TransferResCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferResCode.Descriptor instead.
func (TransferResCode) EnumDescriptor() ([]byte, []int) {
	return file_data_data_data_data_proto_rawDescGZIP(), []int{0}
}

type OrderResCode int32

const (
	OrderResCode_No  OrderResCode = 0
	OrderResCode_Yes OrderResCode = 1
)

// Enum value maps for OrderResCode.
var (
	OrderResCode_name = map[int32]string{
		0: "No",
		1: "Yes",
	}
	OrderResCode_value = map[string]int32{
		"No":  0,
		"Yes": 1,
	}
)

func (x OrderResCode) Enum() *OrderResCode {
	p := new(OrderResCode)
	*p = x
	return p
}

func (x OrderResCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderResCode) Descriptor() protoreflect.EnumDescriptor {
	return file_data_data_data_data_proto_enumTypes[1].Descriptor()
}

func (OrderResCode) Type() protoreflect.EnumType {
	return &file_data_data_data_data_proto_enumTypes[1]
}

func (x OrderResCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderResCode.Descriptor instead.
func (OrderResCode) EnumDescriptor() ([]byte, []int) {
	return file_data_data_data_data_proto_rawDescGZIP(), []int{1}
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	ChunkId int64  `protobuf:"varint,2,opt,name=ChunkId,proto3" json:"ChunkId,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_data_data_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_data_data_data_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_data_data_data_data_proto_rawDescGZIP(), []int{0}
}

func (x *Chunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Chunk) GetChunkId() int64 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

type TransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Req:
	//	*TransferReq_FileName
	//	*TransferReq_DataChunk
	Req isTransferReq_Req `protobuf_oneof:"Req"`
}

func (x *TransferReq) Reset() {
	*x = TransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_data_data_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferReq) ProtoMessage() {}

func (x *TransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_data_data_data_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferReq.ProtoReflect.Descriptor instead.
func (*TransferReq) Descriptor() ([]byte, []int) {
	return file_data_data_data_data_proto_rawDescGZIP(), []int{1}
}

func (m *TransferReq) GetReq() isTransferReq_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (x *TransferReq) GetFileName() string {
	if x, ok := x.GetReq().(*TransferReq_FileName); ok {
		return x.FileName
	}
	return ""
}

func (x *TransferReq) GetDataChunk() *Chunk {
	if x, ok := x.GetReq().(*TransferReq_DataChunk); ok {
		return x.DataChunk
	}
	return nil
}

type isTransferReq_Req interface {
	isTransferReq_Req()
}

type TransferReq_FileName struct {
	FileName string `protobuf:"bytes,1,opt,name=FileName,proto3,oneof"`
}

type TransferReq_DataChunk struct {
	DataChunk *Chunk `protobuf:"bytes,2,opt,name=DataChunk,proto3,oneof"`
}

func (*TransferReq_FileName) isTransferReq_Req() {}

func (*TransferReq_DataChunk) isTransferReq_Req() {}

type TransferRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResCode TransferResCode `protobuf:"varint,1,opt,name=ResCode,proto3,enum=data_data.TransferResCode" json:"ResCode,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *TransferRes) Reset() {
	*x = TransferRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_data_data_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRes) ProtoMessage() {}

func (x *TransferRes) ProtoReflect() protoreflect.Message {
	mi := &file_data_data_data_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRes.ProtoReflect.Descriptor instead.
func (*TransferRes) Descriptor() ([]byte, []int) {
	return file_data_data_data_data_proto_rawDescGZIP(), []int{2}
}

func (x *TransferRes) GetResCode() TransferResCode {
	if x != nil {
		return x.ResCode
	}
	return TransferResCode_Unknown
}

func (x *TransferRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type OrderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId int64 `protobuf:"varint,1,opt,name=ChunkId,proto3" json:"ChunkId,omitempty"`
	NodeId  int64 `protobuf:"varint,2,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
}

func (x *OrderData) Reset() {
	*x = OrderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_data_data_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderData) ProtoMessage() {}

func (x *OrderData) ProtoReflect() protoreflect.Message {
	mi := &file_data_data_data_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderData.ProtoReflect.Descriptor instead.
func (*OrderData) Descriptor() ([]byte, []int) {
	return file_data_data_data_data_proto_rawDescGZIP(), []int{3}
}

func (x *OrderData) GetChunkId() int64 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *OrderData) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

type OrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Req:
	//	*OrderReq_FileName
	//	*OrderReq_OrderData
	Req isOrderReq_Req `protobuf_oneof:"Req"`
}

func (x *OrderReq) Reset() {
	*x = OrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_data_data_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReq) ProtoMessage() {}

func (x *OrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_data_data_data_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReq.ProtoReflect.Descriptor instead.
func (*OrderReq) Descriptor() ([]byte, []int) {
	return file_data_data_data_data_proto_rawDescGZIP(), []int{4}
}

func (m *OrderReq) GetReq() isOrderReq_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (x *OrderReq) GetFileName() string {
	if x, ok := x.GetReq().(*OrderReq_FileName); ok {
		return x.FileName
	}
	return ""
}

func (x *OrderReq) GetOrderData() *OrderData {
	if x, ok := x.GetReq().(*OrderReq_OrderData); ok {
		return x.OrderData
	}
	return nil
}

type isOrderReq_Req interface {
	isOrderReq_Req()
}

type OrderReq_FileName struct {
	FileName string `protobuf:"bytes,1,opt,name=FileName,proto3,oneof"`
}

type OrderReq_OrderData struct {
	OrderData *OrderData `protobuf:"bytes,2,opt,name=OrderData,proto3,oneof"`
}

func (*OrderReq_FileName) isOrderReq_Req() {}

func (*OrderReq_OrderData) isOrderReq_Req() {}

type OrderRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResCode OrderResCode `protobuf:"varint,1,opt,name=ResCode,proto3,enum=data_data.OrderResCode" json:"ResCode,omitempty"`
}

func (x *OrderRes) Reset() {
	*x = OrderRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_data_data_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRes) ProtoMessage() {}

func (x *OrderRes) ProtoReflect() protoreflect.Message {
	mi := &file_data_data_data_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRes.ProtoReflect.Descriptor instead.
func (*OrderRes) Descriptor() ([]byte, []int) {
	return file_data_data_data_data_proto_rawDescGZIP(), []int{5}
}

func (x *OrderRes) GetResCode() OrderResCode {
	if x != nil {
		return x.ResCode
	}
	return OrderResCode_No
}

type IdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *IdReq) Reset() {
	*x = IdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_data_data_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdReq) ProtoMessage() {}

func (x *IdReq) ProtoReflect() protoreflect.Message {
	mi := &file_data_data_data_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdReq.ProtoReflect.Descriptor instead.
func (*IdReq) Descriptor() ([]byte, []int) {
	return file_data_data_data_data_proto_rawDescGZIP(), []int{6}
}

func (x *IdReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type IdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64 `protobuf:"varint,1,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
}

func (x *IdRes) Reset() {
	*x = IdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_data_data_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRes) ProtoMessage() {}

func (x *IdRes) ProtoReflect() protoreflect.Message {
	mi := &file_data_data_data_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRes.ProtoReflect.Descriptor instead.
func (*IdRes) Descriptor() ([]byte, []int) {
	return file_data_data_data_data_proto_rawDescGZIP(), []int{7}
}

func (x *IdRes) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

var File_data_data_data_data_proto protoreflect.FileDescriptor

var file_data_data_data_data_proto_rawDesc = []byte{
	0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x42, 0x05, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x22, 0x5d, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x05, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x22, 0x3d,
	0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x52, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x1b, 0x0a,
	0x05, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x05, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x2a, 0x32, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x6b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x2a,
	0x1f, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x4e, 0x6f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x65, 0x73, 0x10, 0x01,
	0x32, 0xbd, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a,
	0x0e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x28,
	0x01, 0x12, 0x2d, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_data_data_data_proto_rawDescOnce sync.Once
	file_data_data_data_data_proto_rawDescData = file_data_data_data_data_proto_rawDesc
)

func file_data_data_data_data_proto_rawDescGZIP() []byte {
	file_data_data_data_data_proto_rawDescOnce.Do(func() {
		file_data_data_data_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_data_data_data_proto_rawDescData)
	})
	return file_data_data_data_data_proto_rawDescData
}

var file_data_data_data_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_data_data_data_data_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_data_data_data_data_proto_goTypes = []interface{}{
	(TransferResCode)(0), // 0: data_data.TransferResCode
	(OrderResCode)(0),    // 1: data_data.OrderResCode
	(*Chunk)(nil),        // 2: data_data.Chunk
	(*TransferReq)(nil),  // 3: data_data.TransferReq
	(*TransferRes)(nil),  // 4: data_data.TransferRes
	(*OrderData)(nil),    // 5: data_data.OrderData
	(*OrderReq)(nil),     // 6: data_data.OrderReq
	(*OrderRes)(nil),     // 7: data_data.OrderRes
	(*IdReq)(nil),        // 8: data_data.IdReq
	(*IdRes)(nil),        // 9: data_data.IdRes
}
var file_data_data_data_data_proto_depIdxs = []int32{
	2, // 0: data_data.TransferReq.DataChunk:type_name -> data_data.Chunk
	0, // 1: data_data.TransferRes.ResCode:type_name -> data_data.TransferResCode
	5, // 2: data_data.OrderReq.OrderData:type_name -> data_data.OrderData
	1, // 3: data_data.OrderRes.ResCode:type_name -> data_data.OrderResCode
	3, // 4: data_data.DataData.ChunksTransfer:input_type -> data_data.TransferReq
	6, // 5: data_data.DataData.RequestOrder:input_type -> data_data.OrderReq
	8, // 6: data_data.DataData.GetId:input_type -> data_data.IdReq
	4, // 7: data_data.DataData.ChunksTransfer:output_type -> data_data.TransferRes
	7, // 8: data_data.DataData.RequestOrder:output_type -> data_data.OrderRes
	9, // 9: data_data.DataData.GetId:output_type -> data_data.IdRes
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_data_data_data_data_proto_init() }
func file_data_data_data_data_proto_init() {
	if File_data_data_data_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_data_data_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_data_data_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_data_data_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_data_data_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_data_data_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_data_data_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_data_data_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_data_data_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_data_data_data_data_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TransferReq_FileName)(nil),
		(*TransferReq_DataChunk)(nil),
	}
	file_data_data_data_data_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*OrderReq_FileName)(nil),
		(*OrderReq_OrderData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_data_data_data_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_data_data_data_data_proto_goTypes,
		DependencyIndexes: file_data_data_data_data_proto_depIdxs,
		EnumInfos:         file_data_data_data_data_proto_enumTypes,
		MessageInfos:      file_data_data_data_data_proto_msgTypes,
	}.Build()
	File_data_data_data_data_proto = out.File
	file_data_data_data_data_proto_rawDesc = nil
	file_data_data_data_data_proto_goTypes = nil
	file_data_data_data_data_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataDataClient is the client API for DataData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataDataClient interface {
	ChunksTransfer(ctx context.Context, opts ...grpc.CallOption) (DataData_ChunksTransferClient, error)
	//este se usa solo en caso de que el algoritmo sea de exclusion distribuida:
	RequestOrder(ctx context.Context, opts ...grpc.CallOption) (DataData_RequestOrderClient, error)
	GetId(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IdRes, error)
}

type dataDataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataDataClient(cc grpc.ClientConnInterface) DataDataClient {
	return &dataDataClient{cc}
}

func (c *dataDataClient) ChunksTransfer(ctx context.Context, opts ...grpc.CallOption) (DataData_ChunksTransferClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataData_serviceDesc.Streams[0], "/data_data.DataData/ChunksTransfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataDataChunksTransferClient{stream}
	return x, nil
}

type DataData_ChunksTransferClient interface {
	Send(*TransferReq) error
	CloseAndRecv() (*TransferRes, error)
	grpc.ClientStream
}

type dataDataChunksTransferClient struct {
	grpc.ClientStream
}

func (x *dataDataChunksTransferClient) Send(m *TransferReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataDataChunksTransferClient) CloseAndRecv() (*TransferRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TransferRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataDataClient) RequestOrder(ctx context.Context, opts ...grpc.CallOption) (DataData_RequestOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataData_serviceDesc.Streams[1], "/data_data.DataData/RequestOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataDataRequestOrderClient{stream}
	return x, nil
}

type DataData_RequestOrderClient interface {
	Send(*OrderReq) error
	CloseAndRecv() (*OrderRes, error)
	grpc.ClientStream
}

type dataDataRequestOrderClient struct {
	grpc.ClientStream
}

func (x *dataDataRequestOrderClient) Send(m *OrderReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataDataRequestOrderClient) CloseAndRecv() (*OrderRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OrderRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataDataClient) GetId(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IdRes, error) {
	out := new(IdRes)
	err := c.cc.Invoke(ctx, "/data_data.DataData/GetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataDataServer is the server API for DataData service.
type DataDataServer interface {
	ChunksTransfer(DataData_ChunksTransferServer) error
	//este se usa solo en caso de que el algoritmo sea de exclusion distribuida:
	RequestOrder(DataData_RequestOrderServer) error
	GetId(context.Context, *IdReq) (*IdRes, error)
}

// UnimplementedDataDataServer can be embedded to have forward compatible implementations.
type UnimplementedDataDataServer struct {
}

func (*UnimplementedDataDataServer) ChunksTransfer(DataData_ChunksTransferServer) error {
	return status.Errorf(codes.Unimplemented, "method ChunksTransfer not implemented")
}
func (*UnimplementedDataDataServer) RequestOrder(DataData_RequestOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestOrder not implemented")
}
func (*UnimplementedDataDataServer) GetId(context.Context, *IdReq) (*IdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}

func RegisterDataDataServer(s *grpc.Server, srv DataDataServer) {
	s.RegisterService(&_DataData_serviceDesc, srv)
}

func _DataData_ChunksTransfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataDataServer).ChunksTransfer(&dataDataChunksTransferServer{stream})
}

type DataData_ChunksTransferServer interface {
	SendAndClose(*TransferRes) error
	Recv() (*TransferReq, error)
	grpc.ServerStream
}

type dataDataChunksTransferServer struct {
	grpc.ServerStream
}

func (x *dataDataChunksTransferServer) SendAndClose(m *TransferRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataDataChunksTransferServer) Recv() (*TransferReq, error) {
	m := new(TransferReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataData_RequestOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataDataServer).RequestOrder(&dataDataRequestOrderServer{stream})
}

type DataData_RequestOrderServer interface {
	SendAndClose(*OrderRes) error
	Recv() (*OrderReq, error)
	grpc.ServerStream
}

type dataDataRequestOrderServer struct {
	grpc.ServerStream
}

func (x *dataDataRequestOrderServer) SendAndClose(m *OrderRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataDataRequestOrderServer) Recv() (*OrderReq, error) {
	m := new(OrderReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataData_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataDataServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data_data.DataData/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataDataServer).GetId(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data_data.DataData",
	HandlerType: (*DataDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetId",
			Handler:    _DataData_GetId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChunksTransfer",
			Handler:       _DataData_ChunksTransfer_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RequestOrder",
			Handler:       _DataData_RequestOrder_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "data_data/data_data.proto",
}
